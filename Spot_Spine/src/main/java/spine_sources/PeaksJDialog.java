package spine_sources;

import ij.IJ;
import ij.ImagePlus;
import ij.WindowManager;
import ij.gui.ImageCanvas;
import ij.process.ImageProcessor;
import java.awt.Frame;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.text.NumberFormat;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author jean-francoisGilles
 */
public class PeaksJDialog extends javax.swing.JDialog implements MouseListener, MouseMotionListener {

    ComputeDendrite dendrite = null;
    NumberFormat format = NumberFormat.getInstance();
    NumberFormatter formatter = new NumberFormatter(format);
    ImageCanvas projCanvas, mergeCanvas;
    Frame frame;
    int clickLUT = 0; //nb click on button
//    boolean mod;

    /**
     * Creates new form distanceJDialog
     * @param dend
     * @param parent
     * @param modal
     */
    public PeaksJDialog(ComputeDendrite dend, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        initComponents();
        dendrite = dend;
        frame = parent;
        frame.setSize(370, 350);
//        mod = modal;
        
        int maxIntVal = (int) dendrite.getMaxValue(dend.listPeaksOrg);
        
        jSpinnerMinDist.setModel(new SpinnerNumberModel(dendrite.minDist, 0.00, dendrite.maxDist, 0.1));
//        jSpinnerMinDist.setValue(dend.minDist);
        jSpinnerMaxDist.setModel(new SpinnerNumberModel(dendrite.maxDist, dendrite.minDist, 7.00, 0.1));
//        jSpinnerMaxDist.setValue(dend.maxDist);
        //jSpinnerMinMap.setModel(new SpinnerNumberModel(dendrite.imgMapMin, dendrite.imgMapMin, dendrite.imgMapMax, 0.01));

        jSliderIntensity.setValue((int)dendrite.thrsIntVal);
        jSliderIntensity.setMinimum(0);
        jSliderIntensity.setMinorTickSpacing(maxIntVal/20);
        jSliderIntensity.setMajorTickSpacing(maxIntVal/5);
        jSliderIntensity.setMaximum(maxIntVal);
        jLabelNb.setText(""+dendrite.trimListPeaks.size()+"/"+dendrite.listPeaksOrg.size()); //nb peaks
        
        mergeCanvas = dendrite.imgMaxMerge.getCanvas();
        mergeCanvas.addMouseListener(this);
        mergeCanvas.addMouseMotionListener(this);
        mergeCanvas.setScaleToFit(true);
        
        projCanvas = dendrite.imgMaxProj.getCanvas();
        projCanvas.addMouseListener(this);
        projCanvas.addMouseMotionListener(this);
        projCanvas.setScaleToFit(true);
        
        formatter.setValueClass(Integer.class);
        formatter.setAllowsInvalid(false);
        formatter.setMinimum(0);
        formatter.setMaximum(65535);
//        adaptZoom();
    }

    public void setDendrite(ComputeDendrite dendrite) {
        this.dendrite = dendrite;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelKernelSize = new javax.swing.JLabel();
        jButtonExpand = new javax.swing.JButton();
        jButtonReduce = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelMinDist = new javax.swing.JLabel();
        jSpinnerMinDist = new javax.swing.JSpinner();
        jLabelMaxDist = new javax.swing.JLabel();
        jSpinnerMaxDist = new javax.swing.JSpinner();
        jLabelIntensity = new javax.swing.JLabel();
        jSliderIntensity = new javax.swing.JSlider();
        jFormattedTextIntensity = new javax.swing.JFormattedTextField(formatter);
        jButtonLUT = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabelEdit = new javax.swing.JLabel();
        jLabelAdd = new javax.swing.JLabel();
        jLabelDel = new javax.swing.JLabel();
        jLabelCurrentNb = new javax.swing.JLabel();
        jLabelNb = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        labQuestion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Max local distance parameters");
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(222, 222, 222));

        jLabelKernelSize.setText("Max local kernel size");

        jButtonExpand.setText("Expand");
        jButtonExpand.setToolTipText("Add 2 in the findMax radius in xyz");
        jButtonExpand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExpandActionPerformed(evt);
            }
        });

        jButtonReduce.setText("Reduce");
        jButtonReduce.setToolTipText("Reduce of 2 in the findMax radius in xyz");
        jButtonReduce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReduceActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(200, 200, 200));

        jLabelMinDist.setText("Distance to dendrite border: ");

        jSpinnerMinDist.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMinDistStateChanged(evt);
            }
        });

        jLabelMaxDist.setText("to");

        jSpinnerMaxDist.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxDistStateChanged(evt);
            }
        });

        jLabelIntensity.setText("Intensity:");

        jSliderIntensity.setMajorTickSpacing(50);
        jSliderIntensity.setMaximum(1000);
        jSliderIntensity.setMinorTickSpacing(25);
        jSliderIntensity.setPaintTicks(true);
        jSliderIntensity.setToolTipText("Intensity threshold of the minimum intensity of the points");
        jSliderIntensity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderIntensityStateChanged(evt);
            }
        });

        jFormattedTextIntensity.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jFormattedTextIntensity.setText("60000");
        jFormattedTextIntensity.setToolTipText("Intensity threshold of the minimum intensity of the points");
        jFormattedTextIntensity.setMinimumSize(new java.awt.Dimension(50, 26));
        jFormattedTextIntensity.setPreferredSize(new java.awt.Dimension(55, 26));
        jFormattedTextIntensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextIntensityActionPerformed(evt);
            }
        });

        jButtonLUT.setText("Change LUTs");
        jButtonLUT.setToolTipText("Add 2 in the findMax radius in xyz");
        jButtonLUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLUTActionPerformed(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(200, 200, 200));

        jLabelEdit.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelEdit.setText("Manual editing");
        jLabelEdit.setToolTipText("<html>Edit points after previous operations<br/>Otherwise, you can lose those points</html>");

        jLabelAdd.setText("Add: SHIFT+left click");
        jLabelAdd.setToolTipText("<html>Edit points after previous operations<br/>Otherwise, you can lose those points</html>");

        jLabelDel.setText("Del: ALT+left click");
        jLabelDel.setToolTipText("Edit points after previous operations");

        jLabelCurrentNb.setText("Current number of max local:");

        jLabelNb.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabelNb.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNb.setText("NB");

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        //ImageIcon ico = new ImageIcon(getClass().getResource("/question.gif"));
        //Image ico2 = ico.getImage().getScaledInstance(23, 25, Image.SCALE_DEFAULT);
        labQuestion.setIcon(new ImageIcon(getClass().getResource("/question2.gif")));
        //labQuestion.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonLUT)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelKernelSize)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExpand, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonReduce, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextIntensity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelCurrentNb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelMinDist)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinnerMinDist, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabelMaxDist)
                                .addGap(10, 10, 10)
                                .addComponent(jSpinnerMaxDist, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelEdit, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAdd, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(197, 197, 197)
                                .addComponent(jLabelDel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelKernelSize)
                    .addComponent(jButtonExpand)
                    .addComponent(jButtonReduce))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMinDist)
                    .addComponent(jSpinnerMinDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMaxDist)
                    .addComponent(jSpinnerMaxDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderIntensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jButtonLUT)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(labQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jLabelEdit)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAdd)
                    .addComponent(jLabelDel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelCurrentNb, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonOk))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinnerMinDistStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMinDistStateChanged
        //dendrite = SpineJ_All.instance;
        dendrite.minDist = (Double) jSpinnerMinDist.getValue();
        dendrite.selectedSpines(dendrite.thrsIntVal, dendrite.minDist, dendrite.maxDist);
        dendrite.updateListViews();
        jLabelNb.setText(""+dendrite.trimListPeaks.size()+"/"+dendrite.listPeaksOrg.size());
    }//GEN-LAST:event_jSpinnerMinDistStateChanged

    
    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
//        dendrite.removeRedChannel();
        //dendrite.computeSpinePath(dendrite.trimListPeaks);
        this.dispose();
        ImageCanvas mergeCanvas = dendrite.imgMaxMerge.getCanvas();
        mergeCanvas.removeMouseListener(this);
        ImageCanvas projCanvas = dendrite.imgMaxProj.getCanvas();
        projCanvas.removeMouseListener(this);
        WindowManager.setCurrentWindow(dendrite.imgMaxMerge.getWindow());
        Edit_segFrame segFrame = new Edit_segFrame(dendrite);
        segFrame.setVisible(true);
//        SegmentationJDialog diaJ = new SegmentationJDialog(new javax.swing.JFrame(), true);
//        SegmentationFrame diaJ = new SegmentationFrame(dendrite);
//        diaJ.setVisible(true);
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.dispose();
        dendrite.imgMaxMerge.close();
//        dendrite.imgMaxMerge.flush();
        dendrite.imgMaxProj.close();
//        dendrite.imgMaxProj.flush();
        dendrite.imageOrg.show();
//        dendrite.projOrg.show();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jSliderIntensityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderIntensityStateChanged
        dendrite = ComputeDendrite.instance;
        dendrite.thrsIntVal = jSliderIntensity.getValue();
        dendrite.selectedSpines(dendrite.thrsIntVal, dendrite.minDist, dendrite.maxDist);
        dendrite.updateListViews();
        jFormattedTextIntensity.setValue(jSliderIntensity.getValue());
        jLabelNb.setText(""+dendrite.trimListPeaks.size()+"/"+dendrite.listPeaksOrg.size());
    }//GEN-LAST:event_jSliderIntensityStateChanged

    private void jButtonExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExpandActionPerformed
    
        dendrite.kernelVar = dendrite.kernelVar+1;
////        IJ.showStatus("Computing max local");
        dendrite.imgMaxMerge.close();
//        dendrite.imgMaxMerge.flush();
        dendrite.imgMaxProj.close();
//        dendrite.imgMaxProj.flush();
        dendrite.updateMax();
        updateValues();
//        jLabelNb.setText(""+dendrite.nbMaxLocal);
    }//GEN-LAST:event_jButtonExpandActionPerformed

    private void jButtonReduceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReduceActionPerformed
        
        dendrite.kernelVar = dendrite.kernelVar-1;
        if(dendrite.kernelVar<=-2){ //avoid <1
            dendrite.kernelVar=-2;
        }
//        dendrite.imgMaxMerge.flush();
        dendrite.imgMaxMerge.close();
//        dendrite.imgMaxProj.flush();
        dendrite.imgMaxProj.close();
////        IJ.showStatus("Computing max local");
        dendrite.updateMax();
        updateValues();
        dendrite = ComputeDendrite.instance;
//        jLabelNb.setText(""+dendrite.nbMaxLocal);
    }//GEN-LAST:event_jButtonReduceActionPerformed

    private void jFormattedTextIntensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextIntensityActionPerformed
        int val = (int) jFormattedTextIntensity.getValue();
        if (val> jSliderIntensity.getMaximum()){
            jFormattedTextIntensity.setValue(jSliderIntensity.getMaximum());
            jSliderIntensity.setValue(val);
        }
        else {
            jSliderIntensity.setValue(val);
        }
    }//GEN-LAST:event_jFormattedTextIntensityActionPerformed

    private void jSpinnerMaxDistStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxDistStateChanged
        dendrite.maxDist = (Double) jSpinnerMaxDist.getValue();
        dendrite.selectedSpines(dendrite.thrsIntVal, dendrite.minDist, dendrite.maxDist);
        dendrite.updateListViews();
        jLabelNb.setText(""+dendrite.trimListPeaks.size()+"/"+dendrite.listPeaksOrg.size());
    }//GEN-LAST:event_jSpinnerMaxDistStateChanged

    private void jButtonLUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLUTActionPerformed
        // TODO add your handling code here:
        clickLUT++;
        if (clickLUT % 2 == 0){
            //LUT grey = LUT.createLutFromColor(Color.WHITE);
//            LUT magenta = LUT.createLutFromColor(Color.MAGENTA);
//            LUT cyan = LUT.createLutFromColor(Color.CYAN);
            dendrite.imgMaxMerge.setC(3);
            IJ.run(dendrite.imgMaxMerge, "Blue", "");
            dendrite.imgMaxProj.setC(3);
            IJ.run(dendrite.imgMaxProj, "Blue", "");
            
//            dendrite.imgMaxMerge.getProcessor().setLut(grey);
//            dendrite.imgMaxMerge.getProcessor().setLut(grey);
//            dendrite.imgMaxMerge.updateAndDraw();
//            dendrite.imgMaxProj.updateAndDraw();
        }
        else {
            
            dendrite.imgMaxMerge.setC(3);
            IJ.run(dendrite.imgMaxMerge, "Grays", "");
            dendrite.imgMaxProj.setC(3);
            IJ.run(dendrite.imgMaxProj, "Grays", "");
            
//            LUT red = LUT.createLutFromColor(Color.RED);
//            LUT green = LUT.createLutFromColor(Color.GREEN);
//            dendrite.imgMaxMerge.setC(1);
//            dendrite.imgMaxProj.setC(1);
//    //        ColorModel cm = new ColorModel
//            dendrite.imgMaxMerge.getChannelProcessor().setLut(red);
//            dendrite.imgMaxProj.getChannelProcessor().setLut(red);
//            dendrite.imgMaxMerge.setC(2);
//            dendrite.imgMaxProj.setC(2);
//            dendrite.imgMaxMerge.getChannelProcessor().setLut(green);
//            dendrite.imgMaxProj.getChannelProcessor().setLut(green);
//            dendrite.imgMaxMerge.setC(1);
//            dendrite.imgMaxMerge.getChannelProcessor().setColor(Color.RED);
//            dendrite.imgMaxProj.setC(1);
//    //        ColorModel cm = new ColorModel
//            //dendrite.imgMaxMerge.getChannelProcessor().setLut(magenta);
//            dendrite.imgMaxProj.getChannelProcessor().setColor(Color.RED);
//            dendrite.imgMaxMerge.setC(2);
//            dendrite.imgMaxProj.setC(2);
//            dendrite.imgMaxMerge.getChannelProcessor().setColor(Color.GREEN);
//            dendrite.imgMaxProj.getChannelProcessor().setColor(Color.GREEN);
            
        }
        dendrite.imgMaxMerge.updateAndDraw();
        dendrite.imgMaxProj.updateAndDraw();
        
    }//GEN-LAST:event_jButtonLUTActionPerformed

    public void editMaxLocalMerge(int x, int y, int z, boolean del, boolean add) {
        //dendrite = SpineJ_All.instance;
        // Add max local
        if(del && add){
            IJ.showMessage("Warning", "Choose between adding (Ctrl) and deleting (Shift), not both");
        }
        else{
            if (add) {
    //            IJ.log("edit add trim:"+dendrite.trimListPeaks.size()+" listPeaksOrg:"+dendrite.listPeaksOrg.size());
    //            Spine sp = dendrite.findPeakInArea(x, y, dendrite.imageOrg);
                Peak3D pk = dendrite.findMax(x, y, z);//, dendrite.imageOrg);
                // Add maxlocal in list
                dendrite.addPeakinLists(pk);
//                dendrite.selectedSpines(dendrite.thrsIntVal, dendrite.minDist, dendrite.maxDist);
                dendrite.updateListViews();
                dendrite.imgMaxMerge.updateAndDraw();
                dendrite.imgMaxProj.updateAndDraw();
                //updateanddraw proj ??

            } // Remove max local 
            else if (del) {
//                Spine sp = dendrite.findNearestPoint(dendrite.listPeaksOrg, x, y, z);
                List<Peak3D> listPk = dendrite.findNearestPeaks(dendrite.listPeaksOrg, x, y, z);
                listPk.stream().forEach(pk ->{
                    //update displays
                    deleteSpineInDisplay(dendrite.imgMaxMerge, pk);
                    deleteSpineInDisplay(dendrite.imgMaxProj, pk);
                    //remove from list
                    //dendrite.removePeak(dendrite.listPeaksOrg, pk);
                    dendrite.removePeakInLists(pk);
                });
                //update displays
//                dendrite.selectedSpines(dendrite.thrsIntVal, dendrite.minDist, dendrite.maxDist);
                dendrite.updateListViews();
                dendrite.imgMaxMerge.updateAndDraw();
                dendrite.imgMaxProj.updateAndDraw();
            }
            //ADD TO listPeaksOrg? or not --> Add a findnearestPointMerge with listPeaksOrg
            jLabelNb.setText(""+dendrite.trimListPeaks.size()+"/"+dendrite.listPeaksOrg.size());
        }
    }
    
    
    public void updateValues(){
        jSliderIntensity.setMaximum((int) dendrite.getMaxValue(dendrite.listPeaksOrg));
        jLabelNb.setText(""+dendrite.trimListPeaks.size()+"/"+dendrite.listPeaksOrg.size());
        
        mergeCanvas = dendrite.imgMaxMerge.getCanvas();
//        mergeCanvas.addMouseListener(this);
//        mergeCanvas.addMouseMotionListener(this);
//        mergeCanvas.setScaleToFit(true);
        projCanvas = dendrite.imgMaxProj.getCanvas();
//        projCanvas.addMouseListener(this);
//        projCanvas.addMouseMotionListener(this);
//        projCanvas.setScaleToFit(true);
    }
    
    /**
     * Find the index of the nearest point from the current x, y, z
     * @param x
     * @param y
     * @param z
     * @return 
     */
    public int findNearnestPointMerge(int x, int y, int z) {
        dendrite = ComputeDendrite.instance;
        //IJ.log("find1");
        double d, dMin;
        int index = -1;
        dMin = Integer.MAX_VALUE;
        //IJ.log("find2");
        // clic in stack image test only point at z position
        for (int i = 0; i < dendrite.trimListPeaks.size(); i++) {
            // find nearest point cliked in maxmerge image
            //z-1 shift Z between listmax and getZ position ??????
            if (dendrite.trimListPeaks.get(i).getZ() == z) {
                //IJ.log("find3 "+i);
                d = Math.sqrt(Math.pow(dendrite.trimListPeaks.get(i).getX() - x, 2) + Math.pow(dendrite.trimListPeaks.get(i).getY() - y, 2));
                if (d < dMin) {
                    //IJ.log("find3 "+i+" min");
                    dMin = d;
                    index = i;
                    //IJ.log("index "+index+" distance "+dMin);
                }
            }
        }
        return (index);
    }
    
    
    /**
     * Find the index of the nearest point from the current x, y, z
     * @param x
     * @param y
     * @param z
     * @return 
     */
    public int findNearnestPointMergeOrg(int x, int y, int z) {
        dendrite = ComputeDendrite.instance;
        double d, dMin;
        int index = -1;
        dMin = Integer.MAX_VALUE;
        // clic in stack image test only point at z position
        for (int i = 0; i < dendrite.listPeaksOrg.size(); i++) {
            // find nearest point cliked in maxmerge image
            if (dendrite.listPeaksOrg.get(i).getZ() == z) {
                d = Math.sqrt(Math.pow(dendrite.listPeaksOrg.get(i).getX() - x, 2) + Math.pow(dendrite.listPeaksOrg.get(i).getY() - y, 2));
                if (d < dMin) {
                    dMin = d;
                    index = i;
                }
            }
        }
        return (index);
    }

    public void editMaxLocalProj(int x, int y, boolean del, boolean add) {
//        SpineJ_All dendrite = SpineJ_All.instance;
        // Add max local, find in the image stack max intensity near clicked pixel (3x3) in each Z
        if(del && add){
            IJ.showMessage("Warning", "Choose between adding (Ctrl) and deleting (Shift), not both");
        }
        else{
            if (add) {//ADD
//                IJ.log("edit add trim:"+dendrite.trimListPeaks.size()+" listPeaksOrg:"+dendrite.listPeaksOrg.size());
    //            Spine sp = dendrite.findPeakInArea(x, y, dendrite.imageOrg);
                Peak3D pk = dendrite.findMax(x, y, 1);//, dendrite.imageOrg);
                // Add maxlocal in list
                dendrite.addPeakinLists(pk);
                //dendrite.selectedSpines(dendrite.thrsIntVal, dendrite.minDist, dendrite.maxDist);
                dendrite.updateListViews();
                dendrite.imgMaxMerge.updateAndDraw();
                dendrite.imgMaxProj.updateAndDraw();
                dendrite.imgMaxMerge.setZ((int)pk.getZ()+1);
            } // Remove max local
            else if (del) {//DEL
                List<Peak3D> listSp = dendrite.findNearestPeaks(dendrite.listPeaksOrg, x, y, 1);// Marche mal
                listSp.stream().forEach(sp ->{
                    //update displays
                    deleteSpineInDisplay(dendrite.imgMaxMerge, sp);
                    deleteSpineInDisplay(dendrite.imgMaxProj, sp);
                    //remove from list
                    //dendrite.removePeak(dendrite.listPeaksOrg, sp);
                    dendrite.removePeakInLists(sp);
                });
                
//                Spine sp = dendrite.findNearestPoint(dendrite.listPeaksOrg, x, y, 1);
//                //update displays
//                deleteSpineInDisplay(dendrite.imgMaxMerge, sp);
//                deleteSpineInDisplay(dendrite.imgMaxProj, sp);
//                //remove from list
//                dendrite.removeSpine(dendrite.listPeaksOrg, sp);
                
                //update values
                //dendrite.selectedSpines(dendrite.thrsIntVal, dendrite.minDist, dendrite.maxDist);
                dendrite.updateListViews();
                dendrite.imgMaxMerge.updateAndDraw();
                dendrite.imgMaxProj.updateAndDraw();
            }
            jLabelNb.setText(""+dendrite.trimListPeaks.size()+"/"+dendrite.listPeaksOrg.size());
        }
        
    }
    
    /**
     * Delete a point at the indicated position on image channels 1 & 2
     * @param plus
     * @param sp
     */
    public void deleteSpineInDisplay(ImagePlus plus, Peak3D sp){
        int c = plus.getC();
        if (plus.isStack()) {
            plus.setZ((int)sp.getZ()+1);
            plus.setC(1);// one-based
            plus.getProcessor().set((int) sp.getX(), (int) sp.getY(), 0);
//            plus.getStack().setVoxel((int) sp.getX(), (int) sp.getY(), (int) sp.getZ() , 0);//zero-based
            plus.setC(2);// one-based
            plus.getProcessor().set((int) sp.getX(), (int) sp.getY(), 0);
//            plus.getStack().setVoxel((int) sp.getX(), (int) sp.getY(), (int) sp.getZ() , 0);//zero-based
        }
        else {
            plus.setC(1);// one-based
            plus.getProcessor().set((int) sp.getX(), (int) sp.getY(), 0);
//            plus.getStack().setVoxel((int) sp.getX(), (int) sp.getY(), (int) sp.getZ() , 0);
            plus.setC(2);// one-based
            plus.getProcessor().set((int) sp.getX(), (int) sp.getY(), 0);
        }
        plus.setC(c);
        plus.updateAndDraw();
        
//        dendrite.imgMaxMerge.updateAndDraw();
    }
    
    /**
     * Delete a point at the indicated position on image
     * @param x
     * @param y
     * @param channel 
     */
    public void deletePointProj(int x, int y, int channel){
        dendrite.imgMaxProj.setC(channel);
        ImageProcessor ipProj = dendrite.imgMaxProj.getProcessor();
        ipProj.putPixel(x, y, 0);
        
        ipProj.resetMinAndMax();
        dendrite.imgMaxProj.updateAndDraw();
    }

    /**
     * Find the index of the nearest point from the current x, y, z
     * @param x
     * @param y
     * @return 
     */
    public int findNearnestPointProj(int x, int y) {
//        ComputeDendrite dendrite = ComputeDendrite.instance;
        double d, dMin;
        int index = -1;
        dMin = Integer.MAX_VALUE;

        for (int z = 1; z <= dendrite.imgMaxMerge.getNSlices(); z++) {
            for (int i = 0; i < dendrite.trimListPeaks.size(); i++) {
                if (dendrite.trimListPeaks.get(i).getZ() == z - 1) {
                    d = Math.sqrt(Math.pow(dendrite.trimListPeaks.get(i).getX() - x, 2) + Math.pow(dendrite.trimListPeaks.get(i).getY() - y, 2));
                    if (d <= dMin) {
                        dMin = d;
                        index = i;
                    }
                }
            }
        }
        return (index);
    }
    
//    /**
//     * Find the index of the nearest point from the current x, y, z
//     * @param x
//     * @param y
//     * @return 
//     */
//    public int findNearnestPointProjOrg(int x, int y) {
//        SpineJ_All dendrite = SpineJ_All.instance;
//        double d, dMin;
//        int index = -1;
//        dMin = Integer.MAX_VALUE;
//
//        for (int z = 1; z <= dendrite.imgMaxMerge.getNSlices(); z++) {
//            for (int i = 0; i < dendrite.listPeaksOrg.size(); i++) {
//                if (dendrite.listPeaksOrg.get(i).getZ() == z - 1) {
//                    d = Math.sqrt(Math.pow(dendrite.listPeaksOrg.get(i).getX() - x, 2) + Math.pow(dendrite.listPeaksOrg.get(i).getY() - y, 2));
//                    if (d <= dMin) {
//                        dMin = d;
//                        index = i;
//                    }
//                }
//            }
//        }
//        return (index);
//    }
    
    /**
     *
     */
    public void main() {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        try {
            UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                     
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PeaksJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PeaksJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PeaksJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PeaksJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frm = new JFrame();
                frm.setSize(400, 400);
                PeaksJDialog dialog = new PeaksJDialog(dendrite, frm, true);
                dialog.frame.setSize(360, 310);
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonExpand;
    private javax.swing.JButton jButtonLUT;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonReduce;
    private javax.swing.JFormattedTextField jFormattedTextIntensity;
    private javax.swing.JLabel jLabelAdd;
    private javax.swing.JLabel jLabelCurrentNb;
    private javax.swing.JLabel jLabelDel;
    private javax.swing.JLabel jLabelEdit;
    private javax.swing.JLabel jLabelIntensity;
    private javax.swing.JLabel jLabelKernelSize;
    private javax.swing.JLabel jLabelMaxDist;
    private javax.swing.JLabel jLabelMinDist;
    private javax.swing.JLabel jLabelNb;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSliderIntensity;
    private javax.swing.JSpinner jSpinnerMaxDist;
    private javax.swing.JSpinner jSpinnerMinDist;
    private javax.swing.JLabel labQuestion;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mousePressed(MouseEvent e) {
        
        dendrite = ComputeDendrite.instance;
        // if ctrl left or shift left button get cursor coordinates
        if (e.getButton() == MouseEvent.BUTTON1) {
            int z;
            Point pt;
            boolean leftAlt, leftShift;
            ImagePlus img = WindowManager.getCurrentImage();
            // image stack merge selected 
            if (img == dendrite.imgMaxMerge) {
                int c = dendrite.imgMaxMerge.getC();
                dendrite.imgMaxMerge.setC(1);
                pt = dendrite.imgMaxMerge.getCanvas().getCursorLoc();
                z = dendrite.imgMaxMerge.getZ()-1;// 1-based -> 0-based
//                IJ.log("mouse "+pt.x+" "+ pt.y+" "+z);
//                left = e.getButton() == MouseEvent.BUTTON1; // always true
                leftAlt = e.isAltDown();
                leftShift = e.isShiftDown();
                // Edit max local list on merge image
                editMaxLocalMerge(pt.x, pt.y, z, leftAlt, leftShift);
                dendrite.imgMaxMerge.setC(c);
                
            } else if (img == dendrite.imgMaxProj) {
                int c = dendrite.imgMaxProj.getC();
                dendrite.imgMaxMerge.setC(1);
                pt = dendrite.imgMaxProj.getCanvas().getCursorLoc();
//                left = e.getButton() == MouseEvent.BUTTON1; // always true
                leftAlt = e.isAltDown();
                leftShift = e.isShiftDown();
                // Edit max local list on proj image
                editMaxLocalProj(pt.x, pt.y, leftAlt, leftShift);
                dendrite.imgMaxProj.setC(c);
            }
            //dendrite.updateDistances();
            
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseDragged(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseMoved(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
