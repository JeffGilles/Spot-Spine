/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spine_sources;

import ij.IJ;
import ij.ImagePlus;
import ij.WindowManager;
import ij.gui.ImageCanvas;
import ij.gui.Roi;
import ij.plugin.ZProjector;
import ij.plugin.filter.ThresholdToSelection;
import ij.process.ByteProcessor;
import ij.process.ImageProcessor;
import java.awt.Adjustable;
import java.awt.Component;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.Scrollbar;
import java.awt.event.*;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.ImageIcon;
import mcib3d.geom2.Object3DInt;
import mcib3d.geom2.Object3DIntLabelImage;
import mcib3d.geom2.Objects3DIntPopulation;
import mcib3d.geom2.VoxelInt;
import mcib3d.image3d.ImageByte;
import mcib3d.image3d.ImageHandler;

/**
 *
 * @author jean-francoisGilles
 */
public class Edit_segFrame extends javax.swing.JDialog implements AdjustmentListener, MouseWheelListener, MouseListener, MouseMotionListener  {
    
    ComputeDendrite dendrite = null;
    int local_method; //0 Constant, 1 Mean, 2 GaussFit
    int segMethod; //0 Classical, 1 Max, 2 Block
    int radiusVal;
    float methVal; //GaussPc & Weight
    boolean watershed;
    int clickLUT = 0; //increment
    private int[] pt = null;
    ImagePlus proj = null;
    ImagePlus merge = null;
    ImageCanvas mergeCanvas, projCanvas;
    
    private ImagePlus currentImage;
    public Objects3DIntPopulation pop;
    //public Objects3DPopulation popOld;
    private Objects3DIntPopulation pop2D;
    //private Objects3DPopulation pop2DOld;
    ImageByte label = null;
    ImageByte label2D = null;
    private Roi[] arrayRois = null;
    private Roi roi2D = null;
    public List<Float> selectedObj;
    private int currentZmin = 0;
    private int currentZmax = 0;
    
    
    /**
     * Creates new form Edit_segFrame
     * @param dend
     */
    public Edit_segFrame(ComputeDendrite dend) {
        super();
        
        dendrite = dend;
        local_method = 2; segMethod = 2; radiusVal = 10;
        methVal = 2;
        watershed = true;
//        IJ.log(""+local_method+" "+segMethod+" "+ watershed+" "+radiusVal+" "+methVal);
        IJ.showStatus("computing...");
        dendrite.Segmentation(local_method, segMethod, watershed, radiusVal, methVal);
        proj = dendrite.imgMaxProj;
        merge = dendrite.imgMaxMerge;
        pop = dendrite.getHeadsInt();
        IJ.log("test1");
        //popOld = dendrite.getHeads();
        //pop2D = new Objects3DIntPopulation(ImageHandler.wrap(proj));    //OK but be careful about the channels!!
        //pop2DOld = new Objects3DPopulation(ImageHandler.wrap(proj));
        initComponents();
        selectedObj = new ArrayList();
        
        //segMethod = jComboBoxSegMethod.getSelectedIndex();
        
        mergeCanvas = dendrite.imgMaxMerge.getCanvas();
        mergeCanvas.addMouseListener(this);
        mergeCanvas.addMouseMotionListener(this);
        mergeCanvas.setScaleToFit(true);
        
        projCanvas = dendrite.imgMaxProj.getCanvas();
        projCanvas.addMouseListener(this);
        projCanvas.addMouseMotionListener(this);
        projCanvas.setScaleToFit(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBoxAuto = new javax.swing.JCheckBox();
        jLabelLocalMethod = new javax.swing.JLabel();
        jLabelMethValue = new javax.swing.JLabel();
        jLabelRadiusValue = new javax.swing.JLabel();
        jComboBoxSegMethod = new javax.swing.JComboBox();
        jFormattedTextFieldRadiusValue = new javax.swing.JFormattedTextField();
        jButtonUpdate = new javax.swing.JButton();
        jLabelSegMethod = new javax.swing.JLabel();
        jComboBoxLocalMethod = new javax.swing.JComboBox();
        jButtonCancel1 = new javax.swing.JButton();
        jFormattedTextFieldMethVal = new javax.swing.JFormattedTextField();
        jButtonLUT = new javax.swing.JButton();
        labQuestion = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        DelButton = new javax.swing.JToggleButton();
        MergeButton = new javax.swing.JToggleButton();
        AddButton = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        NextButton = new javax.swing.JToggleButton();
        Dilate = new javax.swing.JToggleButton();
        Erode = new javax.swing.JToggleButton();
        FinishButton = new javax.swing.JToggleButton();
        Straight = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Spines Segmentation");
        setBackground(new java.awt.Color(225, 225, 225));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(235, 235, 235));

        jCheckBoxAuto.setSelected(true);
        jCheckBoxAuto.setText("Automatic");
        jCheckBoxAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAutoActionPerformed(evt);
            }
        });

        jLabelLocalMethod.setText("Local method:");
        jLabelLocalMethod.setEnabled(false);

        jLabelMethValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelMethValue.setText("SD value:");
        jLabelMethValue.setToolTipText("<html>Background value for Constant<br>Weight for Mean<br>SD value for Gaussian</html>");
        jLabelMethValue.setEnabled(false);

        jLabelRadiusValue.setText("Radius:");
        jLabelRadiusValue.setToolTipText("<html>Radius in XYZ for Mean Method<br>Max radius for Gaussian Method</html>");
        jLabelRadiusValue.setEnabled(false);

        jComboBoxSegMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Classical", "Max", "Block" }));
        jComboBoxSegMethod.setSelectedIndex(2);
        jComboBoxSegMethod.setEnabled(false);
        jComboBoxSegMethod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSegMethodItemStateChanged(evt);
            }
        });

        jFormattedTextFieldRadiusValue.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextFieldRadiusValue.setText("10");
        jFormattedTextFieldRadiusValue.setToolTipText("<html>Radius in XYZ for Mean Method<br>Max radius for Gaussian Method</html>");
        jFormattedTextFieldRadiusValue.setEnabled(false);
        jFormattedTextFieldRadiusValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldRadiusValueActionPerformed(evt);
            }
        });

        jButtonUpdate.setText("Update");
        jButtonUpdate.setToolTipText("Update with the new values");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jLabelSegMethod.setText("Spot segment:");
        jLabelSegMethod.setEnabled(false);

        jComboBoxLocalMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Constant", "Mean", "Gauss" }));
        jComboBoxLocalMethod.setSelectedIndex(2);
        jComboBoxLocalMethod.setEnabled(false);
        jComboBoxLocalMethod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxLocalMethodItemStateChanged(evt);
            }
        });
        jComboBoxLocalMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLocalMethodActionPerformed(evt);
            }
        });

        jButtonCancel1.setText("Cancel");
        jButtonCancel1.setToolTipText("Exit the plugin");
        jButtonCancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancel1ActionPerformed(evt);
            }
        });

        jFormattedTextFieldMethVal.setText("1.5");
        jFormattedTextFieldMethVal.setToolTipText("<html>Background value for Constant<br>Weight for Mean<br>SD value for Gaussian</html>");
        jFormattedTextFieldMethVal.setEnabled(false);
        jFormattedTextFieldMethVal.setSize(new java.awt.Dimension(35, 26));
        jFormattedTextFieldMethVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldMethValActionPerformed(evt);
            }
        });

        jButtonLUT.setText("Change LUTs");
        jButtonLUT.setToolTipText("");
        jButtonLUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLUTActionPerformed(evt);
            }
        });

        //ImageIcon ico = new ImageIcon(getClass().getResource("/question.gif"));
        //Image ico2 = ico.getImage().getScaledInstance(23, 25, Image.SCALE_DEFAULT);
        labQuestion.setIcon(new ImageIcon(getClass().getResource("/question2.gif")));
        //labQuestion.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        labQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labQuestionMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelRadiusValue))
                            .addComponent(jLabelMethValue, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jFormattedTextFieldRadiusValue)
                            .addComponent(jFormattedTextFieldMethVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLocalMethod)
                            .addComponent(jLabelSegMethod))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxLocalMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jComboBoxSegMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBoxAuto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButtonLUT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCheckBoxAuto))
                    .addComponent(labQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelMethValue)
                            .addComponent(jFormattedTextFieldMethVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLocalMethod)
                            .addComponent(jComboBoxLocalMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFormattedTextFieldRadiusValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRadiusValue)
                            .addComponent(jLabelSegMethod)))
                    .addComponent(jComboBoxSegMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLUT)
                    .addComponent(jButtonCancel1)
                    .addComponent(jButtonUpdate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(218, 218, 218));

        DelButton.setText("Delete");
        DelButton.setToolTipText("Delete the selected spine head");
        DelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelButtonActionPerformed(evt);
            }
        });

        MergeButton.setText("Merge");
        MergeButton.setToolTipText("Merge selected spine heads");
        MergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MergeButtonActionPerformed(evt);
            }
        });

        AddButton.setText("Add");
        AddButton.setToolTipText("Create a new point before clicking");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("<html>On image:<br>Left click to select <br>SHIFT + Left click for new point</html>");

        NextButton.setText("Next");
        NextButton.setToolTipText("Neck line");
        NextButton.setPreferredSize(new java.awt.Dimension(80, 29));
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        Dilate.setText("Dilate");
        Dilate.setToolTipText("Dilate the head shape");
        Dilate.setPreferredSize(new java.awt.Dimension(80, 29));
        Dilate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DilateActionPerformed(evt);
            }
        });

        Erode.setText("Erode");
        Erode.setToolTipText("Erode the head shape");
        Erode.setPreferredSize(new java.awt.Dimension(80, 29));
        Erode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErodeActionPerformed(evt);
            }
        });

        FinishButton.setText("Finish");
        FinishButton.setToolTipText("No neck");
        FinishButton.setPreferredSize(new java.awt.Dimension(80, 29));
        FinishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinishButtonActionPerformed(evt);
            }
        });

        Straight.setText("Straight");
        Straight.setToolTipText("Straight neck");
        Straight.setPreferredSize(new java.awt.Dimension(80, 29));
        Straight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StraightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(MergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(FinishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Dilate, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Straight, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Erode, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DelButton))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MergeButton)
                    .addComponent(Dilate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Erode, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Straight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FinishButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAutoActionPerformed
        if (jCheckBoxAuto.isSelected()) {
            jLabelMethValue.setEnabled(false);
            jFormattedTextFieldMethVal.setEnabled(false);
            jLabelRadiusValue.setEnabled(false);
            jFormattedTextFieldRadiusValue.setEnabled(false);
            jComboBoxSegMethod.setEnabled(false);
            jLabelSegMethod.setEnabled(false);
            jComboBoxLocalMethod.setEnabled(false);
            jLabelLocalMethod.setEnabled(false);
            local_method = 2;
            segMethod = 1;
            radiusVal = 10;
            methVal = (float) 1.5;
            watershed = true;
        } else {
            jLabelMethValue.setEnabled(true);
            jFormattedTextFieldMethVal.setEnabled(true);
            jLabelRadiusValue.setEnabled(true);
            jFormattedTextFieldRadiusValue.setEnabled(true);
            jLabelSegMethod.setEnabled(true);
            jComboBoxSegMethod.setEnabled(true);
            jComboBoxLocalMethod.setEnabled(true);
            jLabelLocalMethod.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxAutoActionPerformed

    private void jComboBoxSegMethodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSegMethodItemStateChanged
        segMethod = jComboBoxSegMethod.getSelectedIndex();
    }//GEN-LAST:event_jComboBoxSegMethodItemStateChanged

    private void jFormattedTextFieldRadiusValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldRadiusValueActionPerformed
        radiusVal = Integer.parseInt(jFormattedTextFieldRadiusValue.getText());
    }//GEN-LAST:event_jFormattedTextFieldRadiusValueActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        dendrite = ComputeDendrite.instance;
//        IJ.log(""+local_method+" "+segMethod+" "+ watershed+" "+radiusVal+" "+methVal);
        dendrite.Segmentation(local_method, segMethod, watershed, Integer.parseInt(jFormattedTextFieldRadiusValue.getText()), Float.parseFloat(jFormattedTextFieldMethVal.getText()));
//        dendrite.Segmentation(local_method, segMethod, watershed, radiusVal, methVal);
        updateValues();
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jComboBoxLocalMethodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxLocalMethodItemStateChanged
        local_method = jComboBoxLocalMethod.getSelectedIndex();
    }//GEN-LAST:event_jComboBoxLocalMethodItemStateChanged

    private void jButtonCancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancel1ActionPerformed
        this.dispose();
        dendrite.imageOrg.show();
    }//GEN-LAST:event_jButtonCancel1ActionPerformed

    private void DelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelButtonActionPerformed
        if(!selectedObj.isEmpty()){
            Collections.sort(selectedObj);
            int currC = merge.getChannel();
            int currZ = merge.getZ();
            dendrite.updateDisplayHeads(selectedObj, 0);
            clearSelections();
            updateValues();
            merge.setZ(currZ);
            merge.killRoi();
            merge.updateAndDraw();
        }
        else
            IJ.showMessage("no object selected!");
    }//GEN-LAST:event_DelButtonActionPerformed

    private void MergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MergeButtonActionPerformed

        if(selectedObj.size() < 2){
            IJ.showMessage("Needs at least 2 selected spines");
        }
        else{
            Collections.sort(selectedObj);
            int currZ = merge.getZ();
            dendrite.updateDisplayHeads(selectedObj, 1);
            clearSelections();
            updateValues();
            merge.setZ(currZ);
            merge.setC(1);
            merge.killRoi();
            merge.updateAndDraw();
            //dendrite = ComputeDendrite.instance;
//            for (Object3DInt o : pop.getObjects3DInt()) {
//                VoxelInt vo = o.getRandomVoxel();
//                IJ.log("list: "+o.getLabel()+ " _ "+o.getName()+ " random:"+vo.getX()+" "+vo.getY()+" "+vo.getValue());
//            }
        }
        // Remove max Local in merge and proj image ???
    }//GEN-LAST:event_MergeButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        
        int[] p = pt;
        if(p != null){
            Peak3D pk = dendrite.addPeak(p[0], p[1], p[2], dendrite.imageOrg);
            dendrite.Segmentation1Peak(pk, local_method, segMethod, watershed, radiusVal, methVal);
            updateValues();
            clearSelections();
        }
        else{
            IJ.showMessage("Needs a point");
        }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void jComboBoxLocalMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLocalMethodActionPerformed
//        IJ.log("meth "+jComboBoxLocalMethod.getSelectedIndex());
        switch (jComboBoxLocalMethod.getSelectedIndex()) {
            case 1:
                jLabelMethValue.setText("Weight:");
                jLabelRadiusValue.setEnabled(true);
                jFormattedTextFieldRadiusValue.setEnabled(true);
                break;
            case 2:
                jLabelMethValue.setText("Gauss Pc:");
                jLabelRadiusValue.setEnabled(true);
                jFormattedTextFieldRadiusValue.setEnabled(true);
                break;
            default:
                jLabelMethValue.setText("Consant value:");
                jLabelRadiusValue.setEnabled(false);
                jFormattedTextFieldRadiusValue.setEnabled(false);
                break;
        }
        
    }//GEN-LAST:event_jComboBoxLocalMethodActionPerformed

    private void jButtonLUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLUTActionPerformed
        clickLUT++;
        if (clickLUT % 2 == 0){
            dendrite.imgMaxMerge.setC(2);
            IJ.run(dendrite.imgMaxMerge, "Green", "");
            dendrite.imgMaxProj.setC(2);
            IJ.run(dendrite.imgMaxProj, "Green", "");
        }
        else {
            dendrite.imgMaxMerge.setC(2);
            IJ.run(dendrite.imgMaxMerge, "Grays", "");
            dendrite.imgMaxProj.setC(2);
            IJ.run(dendrite.imgMaxProj, "Grays", "");
        }
        dendrite.imgMaxMerge.updateAndDraw();
        dendrite.imgMaxProj.updateAndDraw();

    }//GEN-LAST:event_jButtonLUTActionPerformed

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        removeMouseListener(this);
//        this.dispose();
        dendrite.setPaths(false);
        this.dispose();
        
    }//GEN-LAST:event_NextButtonActionPerformed

    private void jFormattedTextFieldMethValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldMethValActionPerformed
        methVal = Float.parseFloat(jFormattedTextFieldMethVal.getText());
    }//GEN-LAST:event_jFormattedTextFieldMethValActionPerformed

    private void DilateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DilateActionPerformed
        if(selectedObj.size() < 1){
            IJ.showMessage("Needs at least one selected spine");
        }
        else{
            int currZ = merge.getZ();
            dendrite.updateDisplayHeads(selectedObj, 3);
            clearSelections();
            updateValues();
            merge.setZ(currZ);
        }
    }//GEN-LAST:event_DilateActionPerformed

    private void ErodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErodeActionPerformed
        if(selectedObj.size() < 1){
            IJ.showMessage("Needs at least one selected spine");
        }
        else{
            int currZ = merge.getZ();
            dendrite.updateDisplayHeads(selectedObj, 4);
            clearSelections();
            updateValues();
            merge.setZ(currZ);
        }
    }//GEN-LAST:event_ErodeActionPerformed

    private void FinishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinishButtonActionPerformed
        removeMouseListener(this);
        dendrite.computeSpineNoPath();
        IJ.log("Image name: "+dendrite.imageOrg.getShortTitle());
        IJ.log(""+dendrite.textLogDendLength);
        IJ.log("Number of Spine heads measured: "+dendrite.heads.getNbObjects());
        this.dispose();
    }//GEN-LAST:event_FinishButtonActionPerformed

    private void StraightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StraightActionPerformed
        removeMouseListener(this);
        dendrite.setPaths(true);
        this.dispose();
    }//GEN-LAST:event_StraightActionPerformed

    private void labQuestionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labQuestionMouseReleased
        try{
            URI uri = URI.create("https://imagej.net/plugins/3d-segmentation#3d-spot-segmentation");
            Desktop.getDesktop().browse(uri);
        }
        catch (IOException ex){
            IJ.error("Open failed");
        }
    }//GEN-LAST:event_labQuestionMouseReleased
    
    
    private void setPoint(int x, int y, int z){
        pt = new int [3];
        pt[0] = x;
        pt[1] = y;
        pt[2] = z;
    }
    
    /**
     * Add square roi around clicked location
     * @param x 
     * @param y 
     */
    private void addroi(int x, int y){
        Roi r = new Roi(x-2, y-2, 5, 5);
        arrayRois = new Roi[merge.getNSlices()];
        for (int z = 0; z < arrayRois.length; z++) {
            arrayRois[z] = r;
        }
        proj.setRoi(r, true);
        merge.setRoi(r, true);
    }
    
    
    private void computeRois() {
        ImagePlus imp = WindowManager.getCurrentImage();
        
        this.registerActiveImage();
//        currentImage = merge;
        
        if (imp == null) {
            return;
        }
        int currentZ = merge.getZ();//1-based
        int zmin = merge.getNSlices() + 1;
        int zmax = -1;
        
        //this.registerActiveImage();
        
        if(!selectedObj.isEmpty()){
            if (proj != null){
                // 2D roi
                if (label2D == null)
                    label2D = new ImageByte("rois2D", proj.getWidth(), proj.getHeight(), 1);
                else
                    label2D.fill(0);
                //ByteProcessor bpro = new ByteProcessor(proj.getWidth(), proj.getHeight());

                ImageHandler ih = ImageHandler.wrap(label2D.getImagePlus());
                Object3DInt obj2D = null;
//                Object3D ob;
                for (int i = 0; i < selectedObj.size(); i++) {
                    //Get Voxels loca
                    
                    List<VoxelInt> list = new ArrayList<>();
                    pop.getObjectByLabel((float)selectedObj.get(i)).getObject3DPlanes().forEach(plane -> 
                            list.addAll(plane.getVoxels()));
                    //setObj
                    obj2D = getObjectZProjection(pop.getObjectByLabel((float)selectedObj.get(i)));
                    //obj2D.translate(pop.getObjectByLabel((float)selectedObj.get(i)).getBoundingBox().xmin, pop.getObjectByLabel((float)selectedObj.get(i)).getBoundingBox().ymin, 0);
                    //obj2D.addVoxels(list);
                    //obj2D.getObject3DPlanes().forEach(plane -> plane.getVoxels().stream().forEach((v) -> v.setZ(0)));
                    //obj draw
                    obj2D.drawObject(ih, 255);
                }
                //convert to roi
                ByteProcessor bpro = new ByteProcessor(proj.getWidth(), proj.getHeight(), (byte[]) label2D.getArray1D());
                bpro.setThreshold(1, 255, ImageProcessor.NO_LUT_UPDATE);
                ImagePlus maskPlus = new ImagePlus("mask ", bpro);
                ThresholdToSelection tts = new ThresholdToSelection();
                tts.setup("", maskPlus);
                tts.run(bpro);
//                roi2D = new Roi(0, 0, 1, 1);
                roi2D = maskPlus.getRoi();
                proj.setRoi(roi2D);
            }
            if (merge != null){
                arrayRois = new Roi[merge.getNSlices()];

                // get zmin and zmax
                Object3DInt obj;
//                Object3D ob;
                for (int i = 0; i < selectedObj.size(); i++) {
                    obj = pop.getObjectByLabel(selectedObj.get(i));
                    if (obj.getBoundingBox().zmin < zmin) {
                        zmin = obj.getBoundingBox().zmin;
                    }
                    if (obj.getBoundingBox().zmax > zmax) {
                        zmax = obj.getBoundingBox().zmax;
                    }
                }
                currentZmin = zmin;//0-based
                currentZmax = zmax;//0-based
                
                // draw objects
                if (label == null)
                    label = new ImageByte("rois", merge.getWidth(), merge.getHeight(), merge.getNSlices());
                else
                    label.fill(0);
                ImageHandler ih = ImageHandler.wrap(label.getImagePlus());
                for (int i = 0; i < selectedObj.size(); i++) {
                    obj = pop.getObjectByLabel((float)selectedObj.get(i));
                    List<VoxelInt> list = new ArrayList<>();
                    obj.getObject3DPlanes().forEach(plane -> list.addAll(plane.getVoxels()));
                    obj.drawObject(ih, 255);
                }
                // extract selections in Z
                for (int zz = zmin; zz <= zmax; zz++) {
                    ByteProcessor mask = new ByteProcessor(merge.getWidth(), merge.getHeight(), (byte[]) label.getArray1D(zz));
                    mask.setThreshold(1, 255, ImageProcessor.NO_LUT_UPDATE);
                    ImagePlus maskPlus = new ImagePlus("mask " + zz, mask);
                    ThresholdToSelection tts = new ThresholdToSelection();
                    tts.setup("", maskPlus);
                    tts.run(mask);
                    arrayRois[zz] = maskPlus.getRoi();
                }
                merge.setZ(currentZ);
                merge.setRoi(arrayRois[currentZ-1]);
                merge.updateAndDraw();
            }
            
        }
//        else {
//            currentZmin = 0;
//            currentZmax = merge.getNSlices();
//            if(pt != null){
//                merge.setSlice(currentZ);
//                merge.setRoi(arrayRois[currentZ-1]);
//                merge.updateAndDraw();
//                proj.setRoi(roi2D);
//                proj.updateAndDraw();
//            }
//            else {
//                merge.killRoi();
//            }
//        }
        
    }
    
    private void updateRois() {
        this.registerActiveImage();
//        updateRois(-1);
        updateRoi();
    }
    
    private void updateRoi() {
        //ImagePlus plus = this.getImage();
        ImagePlus currIma = WindowManager.getCurrentImage();
        
        if (currIma == null) {
//            IJ.log("null");
            return;
        }
        if(arrayRois==null){
            return;
        }
        
        int sl = merge.getSlice()-1;//0-based
        
        if(selectedObj.isEmpty()){
//            IJ.log("no selection");
            currentZmin=0; currentZmax = merge.getNSlices();//0-based
        }
        if (currIma == proj){
            if (merge != null) {
                //sl = merge.getSlice();
//                IJ.log("sl:"+sl);
                if (!selectedObj.isEmpty()){
                    if ((sl >= currentZmin) && (sl <= currentZmax)) {
    //                    IJ.log("in bornes");
                        merge.setRoi(arrayRois[sl]);
                    } else {
                        merge.killRoi();
                    }
                }
                if (selectedObj.isEmpty() && pt == null){
    //                IJ.log("in kill Merge");
                    merge.killRoi();
                }
                merge.updateAndDraw();
            }
//            if (proj != null) {
                if (selectedObj.isEmpty()){
                    proj.killRoi();
                }
                else {
                    proj.setRoi(roi2D);    //Diff is Here
                }
                if (pt != null){
                    proj.setRoi(arrayRois[sl]);
                }
                proj.updateAndDraw();
//            }
        }
        if (currIma == merge){
//            if (merge != null) {
            //sl = merge.getSlice();
            //IJ.log("currSlice"+merge.getCurrentSlice()+"    sl:"+sl+"    zmin:"+currentZmin+"    zmax"+currentZmax+"   nSlices"+merge.getNSlices()+"  StackSize()"+merge.getImageStackSize());
            if ((sl >= currentZmin) && (sl <= currentZmax)) {
//                    IJ.log("in bornes ");
                merge.setRoi(arrayRois[sl]);
//                    IJ.log("cureentzroi "+sl);
            } else {
                merge.killRoi();
            }
            if (selectedObj.isEmpty() && pt == null){
//                IJ.log("in kill Merge");
                merge.killRoi();
            }
            merge.updateAndDraw();
//            }
            if (proj != null) {
                if (selectedObj.isEmpty()){
                    proj.killRoi();
                }
                else {
                    proj.setRoi(arrayRois[sl]);
                }
                if (pt != null){
                    proj.setRoi(arrayRois[sl]);
                }
                proj.updateAndDraw();
            }
        }
        
//        if(!selectedObj.isEmpty()){
//            merge.setZ(sl+1);
//            merge.setRoi(arrayRois[sl]);
//            merge.updateAndDraw();
//        }
        
    }
    
    private void updateRois(int slice) {
        //ImagePlus plus = this.getImage();

        ImagePlus currIma = WindowManager.getCurrentImage();
        
        if (currIma == null) {
//            IJ.log("null");
            return;
        }
        if(arrayRois==null){
            return;
        }
        
        int sl = 0;//0-based
        
        if(selectedObj.isEmpty()){
//            IJ.log("no selection");
            currentZmin=0; currentZmax = merge.getNSlices();
        }
        if (currIma == proj){
            if (merge != null) {
                sl = merge.getSlice() - 1;
                if (slice >= 0) {
                    sl = slice;
                }
//                IJ.log("sl:"+sl);
                if (!selectedObj.isEmpty()){
                    if ((sl >= currentZmin) && (sl <= currentZmax)) {
    //                    IJ.log("in bornes");
                        merge.setRoi(arrayRois[sl]);
                    } else {
                        merge.killRoi();
                    }
                }
                if (selectedObj.isEmpty() && pt == null){
    //                IJ.log("in kill Merge");
                    merge.killRoi();
                }
                merge.updateAndDraw();
            }
//            if (proj != null) {
                if (selectedObj.isEmpty()){
                    proj.killRoi();
                }
                else {
                    proj.setRoi(roi2D);    //Diff is Here
                }
                if (pt != null){
                    proj.setRoi(arrayRois[sl]);
                }
                proj.updateAndDraw();
//            }
        }
        if (currIma == merge){
//            if (merge != null) {
                sl = merge.getSlice() - 1;
                if (slice >= 0) {
                    sl = slice;
                }
//                IJ.log("sl:"+sl+"    zmin:"+currentZmin+"    zmax"+currentZmax);
                if ((sl >= currentZmin) && (sl <= currentZmax)) {
//                    IJ.log("in bornes ");
                    merge.setRoi(arrayRois[sl]);
//                    IJ.log("cureentzroi "+sl);
                } else {
                    merge.killRoi();
                }
                if (selectedObj.isEmpty() && pt == null){
    //                IJ.log("in kill Merge");
                    merge.killRoi();
                }
                merge.updateAndDraw();
//            }
            if (proj != null) {
                if (selectedObj.isEmpty()){
                    proj.killRoi();
                }
                else {
                    proj.setRoi(arrayRois[sl]);
                }
                if (pt != null){
                    proj.setRoi(arrayRois[sl]);
                }
                proj.updateAndDraw();
            }
        }
        
//        if(!selectedObj.isEmpty()){
//            merge.setZ(sl+1);
//            merge.setRoi(arrayRois[sl]);
//            merge.updateAndDraw();
//        }
        
    }
    
    private void clearSelections (){
        selectedObj.clear();
        pt = null;
        arrayRois = null;
        merge.killRoi();
        proj.killRoi();
//        this.registerActiveImage();
//        IJ.log("selection cleared");
    }
    
    private void updateValues(){
        pop = dendrite.heads;//getHeadsInt();
        merge = dendrite.imgMaxMerge;
        proj = dendrite.imgMaxProj;//updateProj
        
        mergeCanvas = dendrite.imgMaxMerge.getCanvas();
        projCanvas = dendrite.imgMaxProj.getCanvas();
    }
    
    private Object3DInt getObjectZProjection(Object3DInt ob){
        Object3DIntLabelImage lab = new Object3DIntLabelImage(ob);
        
        ZProjector proj = new ZProjector(lab.getLabelImage().getImagePlus());
        proj.setMethod(ZProjector.MAX_METHOD);
        proj.doProjection();
        Object3DInt obj2D =  new Object3DInt(ImageHandler.wrap(proj.getProjection()));
        //obj2D.translate(ob.getBoundingBox().xmin, ob.getBoundingBox().ymin, 0);
        return obj2D;
    }
    
    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Edit_segFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Edit_segFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Edit_segFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Edit_segFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Edit_segFrame(dendrite).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton AddButton;
    private javax.swing.JToggleButton DelButton;
    private javax.swing.JToggleButton Dilate;
    private javax.swing.JToggleButton Erode;
    private javax.swing.JToggleButton FinishButton;
    private javax.swing.JToggleButton MergeButton;
    private javax.swing.JToggleButton NextButton;
    private javax.swing.JToggleButton Straight;
    private javax.swing.JButton jButtonCancel1;
    private javax.swing.JButton jButtonLUT;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JCheckBox jCheckBoxAuto;
    private javax.swing.JComboBox jComboBoxLocalMethod;
    private javax.swing.JComboBox jComboBoxSegMethod;
    private javax.swing.JFormattedTextField jFormattedTextFieldMethVal;
    private javax.swing.JFormattedTextField jFormattedTextFieldRadiusValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelLocalMethod;
    private javax.swing.JLabel jLabelMethValue;
    private javax.swing.JLabel jLabelRadiusValue;
    private javax.swing.JLabel jLabelSegMethod;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labQuestion;
    // End of variables declaration//GEN-END:variables

    private void registerActiveImage() {
//        ImagePlus activeImage = this.getImage();
//        ImagePlus activeImage = WindowManager.getCurrentImage();
        ImagePlus activeImage = merge;
        if (activeImage != null && activeImage.getProcessor() != null && activeImage.getImageStackSize() > 1) {
            if (currentImage != null && currentImage.getWindow() != null && currentImage != activeImage) {
                removeScrollListener(currentImage, (AdjustmentListener) this, this);
                currentImage.killRoi();
                currentImage.updateAndDraw();
                currentImage = null;
            }
            if (currentImage != activeImage) {
                addScrollListener(activeImage, this, this);
                this.currentImage = activeImage;
            }
        }
    }
    
    private void removeScrollListener(ImagePlus img, AdjustmentListener al, MouseWheelListener ml) {
        //from Fiji code
        // TODO Find author...
        if ((img.getWindow() != null) && (img.getWindow().getComponents() != null)) {
            for (Component c : img.getWindow().getComponents()) {
                if (c instanceof Scrollbar) {
                    ((Adjustable) c).removeAdjustmentListener(al);
                } else if (c instanceof Container) {
                    for (Component c2 : ((Container) c).getComponents()) {
                        if (c2 instanceof Scrollbar) {
                            ((Adjustable) c2).removeAdjustmentListener(al);
                        }
                    }
                }
            }
            img.getWindow().removeMouseWheelListener(ml);
        }
    }

    private void addScrollListener(ImagePlus img, AdjustmentListener al, MouseWheelListener ml) {
        //from Fiji code
        // TODO Find author...
        for (Component c : img.getWindow().getComponents()) {
            if (c instanceof Scrollbar) {
                ((Adjustable) c).addAdjustmentListener(al);
            } else if (c instanceof Container) {
                for (Component c2 : ((Container) c).getComponents()) {
                    if (c2 instanceof Scrollbar) {
                        ((Adjustable) c2).addAdjustmentListener(al);
                    }
                }
            }
        }
        img.getWindow().addMouseWheelListener(ml);
    }
    
    @Override
    public void mousePressed(MouseEvent e) {
        dendrite = ComputeDendrite.instance;
        if (e.getButton() == MouseEvent.BUTTON1) {
            int z;
            Point p;
            boolean leftShift;
            ImagePlus img = WindowManager.getCurrentImage();
            if(img == merge || img == proj){
                leftShift = e.isShiftDown();
                img.setC(1);
                p = img.getCanvas().getCursorLoc();
                z = img.getZ();// 1-based
                
                ImageProcessor pro = img.getProcessor();
                float val = pro.getPixel(p.x, p.y);
                //IJ.log("val= "+val);
                if (val == 0 && leftShift == true) { //New point
                    // Edit localization
                    //select none
                    selectedObj.clear();
                    addroi(p.x, p.y);
                    setPoint(p.x, p.y, z-1);
//                    IJ.log("pt? "+pt[0]+" "+pt[1]+" "+pt[2]);
                    //si point meme endroit supprimer le point ?
                }
                if(val !=0){ //Select Object3D   //Possibility SHIFT add point
                    //pt = null;//avoid adding nothing with button
                    //IJ.log("val!=0 v:" + val);
                    if (selectedObj.contains(val)){ //deselect & delete from list
                        //unselect & delete
                        //IJ.log("val!=0 && Selected contains val && not empty");
                        int index = selectedObj.indexOf(val);
                        selectedObj.remove(index);
                    }
                    else { //select & add in list
                        //select & add
                        //IJ.log("val!=0 && Selected don't contain val");
//                        selectedObj = new ArrayList();
                        selectedObj.add(val);
                    }
                    computeRois();
                    updateRois();
                }
                else if (val == 0 && leftShift == false) {
                    //pt = null;//avoid adding nothing with button
                    //Deselect
                    //clear list
                    //IJ.log("val==0 && left false");
                    selectedObj.clear();
                    computeRois();
                    clearSelections();
                }
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        this.updateRois();
    }
    
    @Override
    public void adjustmentValueChanged(AdjustmentEvent e) {
//        IJ.log("Adjustement value changed");
        this.updateRois();
    }

}
