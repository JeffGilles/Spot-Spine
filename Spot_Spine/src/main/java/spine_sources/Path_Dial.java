/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package spine_sources;

import ij.IJ;
import ij.ImagePlus;
import ij.WindowManager;
import ij.gui.ImageCanvas;
import ij.gui.PointRoi;
import ij.gui.Roi;
import ij.plugin.filter.ThresholdToSelection;
import ij.process.ByteProcessor;
import ij.process.ImageProcessor;
import java.awt.Adjustable;
import java.awt.Component;
import java.awt.Container;
import java.awt.Point;
import java.awt.Scrollbar;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import static java.lang.Math.floor;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JDialog;
import mcib3d.geom.Point3D;
import mcib3d.geom2.Object3DInt;
import mcib3d.geom2.Objects3DIntPopulation;
import mcib3d.geom2.VoxelInt;
import mcib3d.geom2.measurements.Measure2Distance;
import mcib3d.geom2.measurements.MeasureCentroid;
import mcib3d.geom2.measurementsPopulation.MeasurePopulationDistance;
import mcib3d.geom2.measurementsPopulation.PairObjects3DInt;
import mcib3d.image3d.ImageByte;
import mcib3d.image3d.ImageHandler;
import spine_utils.KDTreeC;
import spine_utils.KDTreeC.KDPoint;

/**
 *
 * @author jeffgilles
 */
public class Path_Dial extends JDialog implements WindowListener, MouseWheelListener, MouseListener, MouseMotionListener  {

    ComputeDendrite dendrite = null;
    ImagePlus myImage = null;
    ImageByte labelByte = null;
    double distMax = 5;//in pxl
    public Objects3DIntPopulation pop;
    public Float selectedObj = null;
    private ImageByte label = null;
    private Object3DInt obj = null;
    private Roi[] arrayRois = null;
    private VoxelInt selectedVox = null;
    private VoxelInt closestVox = null;
    private int currentZmin = 0;
    private int currentZmax = 0;
    private ImageCanvas imCanvas;
    
//    private ImagePlus currentImage;
    
    /**
     * Creates new form Path_Dial
     */
    public Path_Dial(ComputeDendrite dend) {
        initComponents();
        dendrite = dend;
        myImage = dend.imaResult;
        pop = dend.heads;
        
        imCanvas = dendrite.imaResult.getCanvas();
        imCanvas.addMouseListener(this);
        imCanvas.addMouseMotionListener(this);
        imCanvas.setScaleToFit(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        finishClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(200, 200, 200));

        updateButton.setText("Update path");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete path");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        finishClose.setText("Finish");
        finishClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishCloseActionPerformed(evt);
            }
        });

        jLabel1.setText("<html>Left click to select head or path<br>SHIFT+click to define new path edge</html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(finishClose)
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finishClose)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if(closestVox == null){
            IJ.showMessage("Selection Error", "Please, click on the image near a head first!");
        }
        else{
            int s = myImage.getSlice();
            dendrite.updateNeck(closestVox);
//            myImage = dendrite.imaResult;
            myImage.updateImage();
//            imCanvas = dendrite.imaResult.getCanvas();
            myImage.killRoi();
            myImage.setSlice(s);
            IJ.log("done s:"+s);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(obj == null){
            IJ.showMessage("Selection Error", "Please, click on a head first!");
        }
        else{
            int s = myImage.getSlice();
            dendrite.deleteNeck(obj);
//            myImage = dendrite.imaResult;
            myImage.updateImage();
//            imCanvas = dendrite.imaResult.getCanvas();
            myImage.killRoi();
            myImage.setSlice(s);
            myImage.updateImage();
            IJ.log("done s:"+s);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void finishCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishCloseActionPerformed
        imCanvas.removeMouseListener(this);
        imCanvas.removeMouseMotionListener(this);
        IJ.log("Image name: "+dendrite.imageOrg.getShortTitle());
        IJ.log(""+dendrite.textLogDendLength);
        IJ.log("Number of Spine heads measured: "+dendrite.heads.getNbObjects());
        this.dispose();
    }//GEN-LAST:event_finishCloseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        imCanvas.removeMouseListener(this);
        imCanvas.removeMouseMotionListener(this);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Path_Dial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Path_Dial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Path_Dial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Path_Dial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Path_Dial().setVisible(true);
//            }
//        });
//    }
    
    private void computeClosestObjBB(){
        Object3DInt voxObj = new Object3DInt(selectedVox);
        Objects3DIntPopulation pop1 = new Objects3DIntPopulation();
        pop1.addObject(voxObj, 1);
        final MeasurePopulationDistance distance = new MeasurePopulationDistance(pop1, dendrite.getHeadsInt(), distMax);
        distance.setMeasurementMethod(MeasurePopulationDistance.DIST_BB_PIX);
        
        List<PairObjects3DInt> BBOjects = distance.getPairsObject1(voxObj.getLabel());
        Object3DInt obj2 = null;
        if ((BBOjects != null) && (!BBOjects.isEmpty())) {
            BBOjects.sort(Comparator.comparingDouble(PairObjects3DInt::getPairValue));
            // first distance
            PairObjects3DInt pair = BBOjects.get(0);
            double dist = pair.getPairValue();
            if (dist < distMax){
                obj2 = pair.getObject3D2();
            }
        }
        Measure2Distance dist2 = new Measure2Distance(voxObj, obj2);
        closestVox = dist2.getBorder2Pix();
        
    }
    
    //coord BB from closest center and selected point
    private void computeClosestObjBBCenter(){
        Object3DInt voxObj = new Object3DInt(selectedVox);
        double[] voxCoord = {selectedVox.getX(), selectedVox.getY(), selectedVox.getZ()};
        List<Object3DInt> pop2 = dendrite.getHeadsInt().getObjects3DInt();
        KDTreeC kdTreeC = new KDTreeC(3);
        kdTreeC.setScale2(dendrite.cal0.pixelWidth, dendrite.cal0.pixelHeight, dendrite.cal0.pixelDepth);
        
        pop2.forEach(obj -> {
            MeasureCentroid centroid = new MeasureCentroid(obj);
            Point3D point = centroid.getCentroidAsPoint();
            kdTreeC.add(new double[]{point.x, point.y, point.z}, obj);
        });
        KDPoint[] closests = kdTreeC.getNearestNeighbors(voxCoord, 1);
        Object3DInt closest = (Object3DInt) closests[0].obj;
        
        Measure2Distance measure = new Measure2Distance(voxObj, closest);
        VoxelInt vClosest = measure.getBorder2Pix();
        IJ.log("vclos "+vClosest.getX()+ " "+vClosest.getY()+ " "+vClosest.getZ());
        
    }
    
    private Object3DInt getClosest(){
        Object3DInt voxObj = new Object3DInt(selectedVox);
        Objects3DIntPopulation pop1 = new Objects3DIntPopulation();
        pop1.addObject(voxObj, 1);
        final MeasurePopulationDistance distance = new MeasurePopulationDistance(pop1, dendrite.getHeadsInt(), distMax);
        distance.setMeasurementMethod(MeasurePopulationDistance.DIST_BB_PIX);
        
        List<PairObjects3DInt> BBOjects = distance.getPairsObject1(voxObj.getLabel());
        Object3DInt obj2 = null;
        if ((BBOjects != null) && (!BBOjects.isEmpty())) {
            BBOjects.sort(Comparator.comparingDouble(PairObjects3DInt::getPairValue));
            // first distance
            PairObjects3DInt pair = BBOjects.get(0);
            double dist = pair.getPairValue();
            if (dist < distMax){
                obj2 = pair.getObject3D2();
            }
        }
        //Measure2Distance dist2 = new Measure2Distance(voxObj, obj2);
        //if( dist2.getValue("DIST_CC_PIX")<7)
        return obj2;
    }
    
    private void computeRois() {
        ImagePlus imp = WindowManager.getCurrentImage();
//        this.registerActiveImage();
//        currentImage = merge;
        
        if (imp == null) {
            return;
        }
        int currentZ = imp.getZ();//1-based
        int zmin = imp.getNSlices() + 1;
        int zmax = -1;
        
        //this.registerActiveImage();
        
        if(selectedObj != null){
            arrayRois = new Roi[imp.getNSlices()];

            // get zmin and zmax
            Object3DInt obj;
//                Object3D ob;
            obj = pop.getObjectByLabel(selectedObj);
            if (obj.getBoundingBox().zmin < zmin) {
                zmin = obj.getBoundingBox().zmin;
            }
            if (obj.getBoundingBox().zmax > zmax) {
                zmax = obj.getBoundingBox().zmax;
            }
            
            IJ.log("selectObj:"+selectedObj+" zmin"+zmin+" zmax"+zmax);
            
            currentZmin = zmin;//0-based
            currentZmax = zmax;//0-based
            
            // draw objects
            if (label == null)
                label = new ImageByte("rois", imp.getWidth(), imp.getHeight(), imp.getNSlices());
            else
                label.fill(0);
            ImageHandler ih = ImageHandler.wrap(label.getImagePlus());
//                for (int i = 0; i < selectedObj.size(); i++) {
                obj = pop.getObjectByLabel((float)selectedObj);
                List<VoxelInt> list = new ArrayList<>();
                obj.getObject3DPlanes().forEach(plane -> list.addAll(plane.getVoxels()));
                obj.drawObject(ih, 255);
//                }
            // extract selections in Z
            for (int zz = zmin; zz <= zmax; zz++) {
                ByteProcessor mask = new ByteProcessor(imp.getWidth(), imp.getHeight(), (byte[]) label.getArray1D(zz));
                mask.setThreshold(1, 255, ImageProcessor.NO_LUT_UPDATE);
                ImagePlus maskPlus = new ImagePlus("mask " + zz, mask);
                ThresholdToSelection tts = new ThresholdToSelection();
                tts.setup("", maskPlus);
                tts.run(mask);
                arrayRois[zz] = maskPlus.getRoi();
            }
            imp.setZ(currentZ);
            imp.setRoi(arrayRois[currentZ-1]);
            imp.updateAndDraw();
        }
        
    }
    
    private void updateRois() {
//        this.registerActiveImage();
//        updateRois(-1);
        updateRoi();
    }
    
    private void updateRoi() {
        //ImagePlus plus = this.getImage();
//        ImagePlus currIma = WindowManager.getCurrentImage();
        
        if (myImage == null || arrayRois==null){
            IJ.log("no arrayRois");
            return;
        }
        
        int sl = myImage.getSlice()-1;//0-based
        
        if(selectedObj != null){
//            IJ.log("no selection");
            currentZmin=0; 
            currentZmax = myImage.getNSlices();//0-based
        
        
//            if (merge != null) {
            //sl = merge.getSlice();
            //IJ.log("currSlice"+merge.getCurrentSlice()+"    sl:"+sl+"    zmin:"+currentZmin+"    zmax"+currentZmax+"   nSlices"+merge.getNSlices()+"  StackSize()"+merge.getImageStackSize());
            if ((sl >= currentZmin) && (sl <= currentZmax)) {
//                    IJ.log("in bornes ");
                myImage.setRoi(arrayRois[sl]);
//                    IJ.log("cureentzroi "+sl);
            } else {
                myImage.killRoi();
            }
            myImage.updateAndDraw();
        }
        
    }
    
    private void updateRois(int slice) {
        //ImagePlus plus = this.getImage();

//        ImagePlus currIma = WindowManager.getCurrentImage();
        
        if (myImage == null) {
//            IJ.log("null");
            return;
        }
        if(arrayRois==null){
            return;
        }
        
        int sl = 0;//0-based
        
        if(selectedObj != null){
//            IJ.log("no selection");
            currentZmin=0; currentZmax = myImage.getNSlices();
        
            sl = myImage.getSlice() - 1;
            if (slice >= 0) {
                sl = slice;
            }
//                IJ.log("sl:"+sl+"    zmin:"+currentZmin+"    zmax"+currentZmax);
            if ((sl >= currentZmin) && (sl <= currentZmax)) {
//                    IJ.log("in bornes ");
                myImage.setRoi(arrayRois[sl]);
//                    IJ.log("cureentzroi "+sl);
            } else {
                myImage.killRoi();
            }
            myImage.updateAndDraw();
//            }
        }
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton finishClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

//    private void registerActiveImage() {
////        ImagePlus activeImage = this.getImage();
//        ImagePlus activeImage = WindowManager.getCurrentImage();
////        ImagePlus activeImage = myImage;
//        if (activeImage != null && activeImage.getProcessor() != null && activeImage.getImageStackSize() > 1) {
//            if (currentImage != null && currentImage.getWindow() != null && currentImage != activeImage) {
////                removeScrollListener(currentImage, (AdjustmentListener) this, this);
//                currentImage.killRoi();
//                currentImage.updateAndDraw();
//                currentImage = null;
//            }
//            if (currentImage != activeImage) {
////                addScrollListener(activeImage, this, this);
//                this.currentImage = activeImage;
//            }
//        }
//    }
    
    
    private void removeScrollListener(ImagePlus img, AdjustmentListener al, MouseWheelListener ml) {
        //from Fiji code
        // TODO Find author...
        if ((img.getWindow() != null) && (img.getWindow().getComponents() != null)) {
            for (Component c : img.getWindow().getComponents()) {
                if (c instanceof Scrollbar) {
                    ((Adjustable) c).removeAdjustmentListener(al);
                } else if (c instanceof Container) {
                    for (Component c2 : ((Container) c).getComponents()) {
                        if (c2 instanceof Scrollbar) {
                            ((Adjustable) c2).removeAdjustmentListener(al);
                        }
                    }
                }
            }
            img.getWindow().removeMouseWheelListener(ml);
        }
    }

    private void addScrollListener(ImagePlus img, AdjustmentListener al, MouseWheelListener ml) {
        //from Fiji code
        // TODO Find author...
        for (Component c : img.getWindow().getComponents()) {
            if (c instanceof Scrollbar) {
                ((Adjustable) c).addAdjustmentListener(al);
            } else if (c instanceof Container) {
                for (Component c2 : ((Container) c).getComponents()) {
                    if (c2 instanceof Scrollbar) {
                        ((Adjustable) c2).addAdjustmentListener(al);
                    }
                }
            }
        }
        img.getWindow().addMouseWheelListener(ml);
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        this.updateRois();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mousePressed(MouseEvent e) {
        dendrite = ComputeDendrite.instance;
        if (e.getButton() == MouseEvent.BUTTON1) {
            int z;
            Point p;
            boolean leftShift;
            ImagePlus img = WindowManager.getCurrentImage();
            int c = img.getC();// 1-based
            if(img == myImage){
                leftShift = e.isShiftDown();
                p = img.getCanvas().getCursorLoc();
                z = img.getZ();// 1-based
                img.setC(1);// 1-based
                ImageProcessor pro = img.getProcessor();
                float val = pro.getPixel(p.x, p.y);
                selectedVox = new VoxelInt(p.x, p.y, z, val);//1-based
                // path 5 ToObj si mieux
                if(selectedObj == null){
                    if( val>9 ){//&& c2==1) {
                        selectedObj = (float) floor(val/10);
                        obj = dendrite.heads.getObjectByLabel(selectedObj);
                        IJ.log("Floor val: "+(float) floor(val/10)+" c:"+c);
                        computeRois();
                    }
                }
                else{
                    selectedObj = null;
                    IJ.run(myImage, "Select None", "");
                    myImage.killRoi();
                }
                if(leftShift){
                    IJ.run(myImage, "Select None", "");
                    myImage.killRoi();
                    computeClosestObjBB();
                    myImage.setRoi(new PointRoi(closestVox.getX(), closestVox.getY(),"large yellow dot"));
                    myImage.updateAndDraw();
                }
//                else{
//                    IJ.run(myImage, "Select None", "");
//                }
                
            }
            img.setC(c);// 1-based
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseEntered(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseExited(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseDragged(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseMoved(MouseEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowOpened(WindowEvent e) {
        addWindowListener(this);
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowClosing(WindowEvent e) {
        imCanvas.removeMouseListener(this);
        imCanvas.removeMouseMotionListener(this);
        this.dispose();
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowClosed(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowActivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
}
